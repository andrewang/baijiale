{"version":3,"sources":["../../../../../../assets/scripts/common/logMgr/assets/scripts/common/logMgr/LogMgr.js"],"names":["LogMgr","files","logStr","err","filename","lineNumber","message","error","append","getJsFileDataArr","data","readDataStr","jsb","fileUtils","getStringFromFile","split","str","length","substring","window","__errorHandler","bind","exports","module"],"mappings":";;;;;;AAAA,IAAIA,SAAS;AACTC,WAAO,EADE;AAETC,YAAQ,EAFC;;AAITC,SAAK,aAAUC,QAAV,EAAoBC,UAApB,EAAgCC,OAAhC,EAAyCC,KAAzC,EAAgD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAKC,MAAL,CAAY,oEAAZ;AACA,aAAKA,MAAL,CAAYF,UAAU,IAAtB;AACA,aAAKE,MAAL,CAAY,2BAA2BJ,QAA3B,GAAsC,GAAtC,GAA4CC,UAA5C,GAAyD,IAArE;AACA,aAAKG,MAAL,CAAY,kBAAkBD,KAA9B;AACA,aAAKC,MAAL,CAAY,sEAAZ;AACH,KA9BQ;;AAgCTC,sBAAkB,0BAAUL,QAAV,EAAoB;AAClC,YAAIM,OAAO,KAAKT,KAAL,CAAWG,QAAX,CAAX;AACA,YAAI,CAACM,IAAL,EAAW;AACP,gBAAIC,cAAcC,IAAIC,SAAJ,CAAcC,iBAAd,CAAgCV,QAAhC,CAAlB;AACAM,mBAAOC,YAAYI,KAAZ,CAAkB,IAAlB,CAAP;AACH;AACD,eAAOL,IAAP;AACH,KAvCQ;;AAyCTF,YAAQ,gBAAUQ,GAAV,EAAe;AACnB,YAAI,KAAKd,MAAL,CAAYe,MAAZ,IAAsB,KAA1B,EAAiC;AAC7B,iBAAKf,MAAL,GAAc,KAAKA,MAAL,CAAYgB,SAAZ,CAAsB,IAAtB,EAA4B,KAAKhB,MAAL,CAAYe,MAAxC,CAAd;AACH;AACD,aAAKf,MAAL,IAAec,GAAf;AACH;AA9CQ,CAAb;;AAkDAG,OAAOC,cAAP,GAAwBpB,OAAOG,GAAP,CAAWkB,IAAX,CAAgBrB,MAAhB,CAAxB;;AAEAsB,UAAUC,OAAOD,OAAP,GAAiBtB,MAA3B","file":"LogMgr.js","sourceRoot":"../../../../../../assets/scripts/common/logMgr","sourcesContent":["var LogMgr = {\n    files: {},\n    logStr: \"\",\n\n    err: function (filename, lineNumber, message, error) {\n        // var dataArr = this.getJsFileDataArr(filename);\n        // if (dataArr) {\n        //     var jsFileName = \"\";\n        //     var jsFileLineNum = 0;\n        //     for (var index = lineNumber; index > 0; index--) {\n        //         var data = dataArr[index];\n        //         if (data.indexOf(\"// scripts/\") >= 0 && data.indexOf(\".js\") >= 0) {\n        //             jsFileName = data;\n        //             jsFileLineNum = lineNumber - index - 3;\n        //             break;\n        //         }\n        //     }\n        //     this.append(\"################################################################\\n\");\n        //     this.append(message + \"\\n\");\n        //     this.append(\"error in this file :  \" + jsFileName + \":\" + jsFileLineNum + \"\\n\");\n        //     for (var index = lineNumber - 1; index < dataArr.length && index < lineNumber + 5; index++) {\n        //         this.append(dataArr[index] + \"\\n\");\n        //     }\n        //     this.append(\"################################################################\\n\\n\");\n        // }\n        this.append(\"################################################################\\n\");\n        this.append(message + \"\\n\");\n        this.append(\"error in this file :  \" + filename + \":\" + lineNumber + \"\\n\");\n        this.append(\"tracesback : \" + error);\n        this.append(\"################################################################\\n\\n\");\n    },\n\n    getJsFileDataArr: function (filename) {\n        var data = this.files[filename];\n        if (!data) {\n            var readDataStr = jsb.fileUtils.getStringFromFile(filename);\n            data = readDataStr.split(\"\\n\");\n        }\n        return data;\n    },\n\n    append: function (str) {\n        if (this.logStr.length >= 20000) {\n            this.logStr = this.logStr.substring(5000, this.logStr.length)\n        }\n        this.logStr += str\n    },\n};\n\n\nwindow.__errorHandler = LogMgr.err.bind(LogMgr);\n\nexports = module.exports = LogMgr;"]}