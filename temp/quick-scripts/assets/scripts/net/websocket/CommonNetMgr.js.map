{"version":3,"sources":["CommonNetMgr.js"],"names":["ProtoUtil","require","Code","Socket","cc","Class","extends","Component","properties","gate","_connectTime","_heatbeat","maxConnectTime","reconnectSecond","maxReconnectSecond","isReconnect","gIsReconnect","setIsReconnnect","getSocket","socket","init","initData","close","log","connectCb","director","getScheduler","unschedule","stopHeatBeat","reconnect","next","reconnectCb","console","self","showMsgBoxConnectCb","common","showMsgBox","type","msg","okCb","login","sceneNode","js","showLoadingView","schedule","startHeartBeat","heatBeatCallBack","request","interval","name","cb","onError","err","JSON","stringify","onClose","bind","onOpen","uid","gUserData","token","dingdingData","uToken","ret","code","OK","hideLoadingView","heartbeat","playerInfo","user_base_info","is_waybill_online_and_exit_game","eventMgr","emit","http","sendRequest","status","isSuc","connect","ws","on","getGameServerIp","ip","port"],"mappings":"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","file":"CommonNetMgr.js","sourceRoot":"../../../../../../assets/scripts/net/websocket","sourcesContent":["var ProtoUtil = require(\"ProtoUtil\");\nvar Code = require(\"Code\");\nvar Socket = require('Socket');\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        gate: null,\n        _connectTime: 0,\n        _heatbeat: 5,//从服务端获取\n        maxConnectTime: 2,\n        reconnectSecond: 0,\n        maxReconnectSecond: 5,\n        // isReconnect: true,\n        isReconnect: gIsReconnect,\n    },\n\n    setIsReconnnect: function (isReconnect) {//长链接断开时是否自动重新连接\n        this.isReconnect = isReconnect;\n    },\n\n    getSocket: function () {\n        return this.socket;\n    },\n\n    init: function () {\n        //this.__instanceId = cc.ClassManager.getNewInstanceId();\n    },\n\n    initData: function () {//初始化常用数据\n\n    },\n\n    close: function () {//关闭长链接\n        cc.log(\"111?????&&&&&\", this.connectCb)\n        if (this.connectCb) {\n            cc.director.getScheduler().unschedule(this.connectCb, this);\n            this.connectCb = null\n        }\n        if (!this.socket) {\n            return\n        }\n        this.socket.close();\n        this.socket = null;\n        this.stopHeatBeat();\n    },\n    //重新连接\n    reconnect: function (next) {\n        this.reconnectCb = next\n        if (!this.isReconnect) {\n            console.log(\"不重连\");\n            return;\n        }\n        // if ((this._connectTime++) > this.maxConnectTime) {\n        //     this._connectTime = 0;\n        //     //cc.global.rootNode.emit('RequestReconnect');\n        // } else {\n            \n        // }\n        this.reconnectSecond = this.reconnectSecond > this.maxReconnectSecond ? this.maxReconnectSecond : this.reconnectSecond;\n        console.log(this.reconnectSecond + '秒后重新连接');\n        //cc.global.loading.show();\n        var self = this;\n        if (this.connectCb) {\n            cc.director.getScheduler().unschedule(this.connectCb, this);\n            this.connectCb = null\n        }\n        this.showMsgBoxConnectCb = function () {\n            cc.common.showMsgBox({\n                type: 2, msg: \"网络连接失败，请重试！\", okCb: function () {\n                    self.login(self.reconnectCb);\n                    cc.sceneNode.js.showLoadingView()\n                }\n            })\n        }\n        // this.connectCb = function () {\n        //     cc.log('正在重新连接');\n\n        // }\n        cc.director.getScheduler().unschedule(this.showMsgBoxConnectCb, this);\n        cc.director.getScheduler().schedule(this.showMsgBoxConnectCb, this, 0, 0, this.reconnectSecond, false);\n        this.reconnectSecond += 5;\n    },\n    //开始发送心跳，不可外部调用\n    startHeartBeat: function () {\n        var self = this;\n        this.heatBeatCallBack = function () {\n            var msg = {};\n            console.log('发送心跳');\n            self.request(\"user_heartbeat\", msg, function () { });\n        };\n        cc.director.getScheduler().unschedule(this.heatBeatCallBack, this);\n        var interval = this._heatbeat;\n        // cc.director.getScheduler().schedule(this.heatBeatCallBack, this, interval, cc.macro.REPEAT_FOREVER, 0, false)\n        cc.director.getScheduler().schedule(this.heatBeatCallBack, this, 5)\n    },\n    //停止发送心跳，不可外部调用\n    stopHeatBeat: function () {\n        this.unschedule(this.heatBeatCallBack);\n    },\n\n    // 发送网络请求\n    request: function (name, msg, cb) {\n        if (!this.socket) {\n            cc.log(\"socket closed\");\n            return\n        }\n        this.socket.request(name, msg, cb)\n    },\n\n    //首先会进行一次http请求获取真正的gate地址，然后才进行长连接\n    login: function (next) {//next(socket,code)\n        // console.log('login');\n        // this.initData();\n        var self = this;\n        var socket = new Socket();\n\n        var onError = function (err) {\n            cc.log(\"connect error %s\", JSON.stringify(err));\n        }\n\n        var onClose = function () {\n            cc.log(\"connect close\");\n            self.stopHeatBeat();\n            self.socket = null;\n            if (this.isReconnect) {\n                self.reconnect(next);\n            }\n        }.bind(this)\n\n        var onOpen = function () {\n            cc.log(\"connect success\");\n\n            //WS 验证\n            var msg = { uid: gUserData.uid, token: gUserData.dingdingData.uToken };\n            socket.request(\"user_auth\", msg, function (ret) {\n                cc.log(ret)\n                cc.log(\"user_auth ret %s\", JSON.stringify(ret));\n                // if (ret.code != Code.OK || !ret.player) {\n                if (ret.code != Code.OK) {\n                    return next(null, ret.code);\n                }\n                cc.sceneNode.js.hideLoadingView()\n                self.socket = socket;\n                self.reconnectSecond = 0;\n                self._heatbeat = ret.heartbeat;\n                gUserData.playerInfo = ret.user_base_info\n                //玩家中途离线，获取结算信息\n                if (1 == ret.is_waybill_online_and_exit_game) {\n                    cc.eventMgr.emit(\"requestResultData\")\n                }\n                next(socket);\n                //暂时屏蔽\n                self.startHeartBeat();\n            })\n        }.bind(this)\n\n        var msg = { uid: gUserData.uid, token: gUserData.dingdingData.uToken };\n        var http = require(\"Http\");\n\n        http.sendRequest(\"/gate/host_info\", msg, function (ret, status) {\n            if (ret != null) {\n                if (Code.isSuc(ret.code)) {\n                    self.gate = ret;\n                    socket.connect(self.gate.ws);\n                    socket.on(\"onopen\", onOpen);\n                    socket.on(\"onclose\", onClose);\n                    socket.on(\"onerror\", onError);\n                } else {\n                    return next(null, ret.code);\n                }\n            } else {\n                // console.log(status);\n                self.reconnect(next);\n            }\n        });\n    },\n\n    //获取游戏服务器地址\n    getGameServerIp: function () {\n        if (this.gate) {\n            return \"http://\" + this.gate.ip + \":\" + this.gate.port\n        }\n    },\n});\n"]}